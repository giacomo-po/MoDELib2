# cmake .. -D CMAKE_CXX_COMPILER=/opt/local/bin/g++-mp-12
cmake_minimum_required(VERSION 3.1.0)
project(DDomp VERSION 1.0.0 LANGUAGES CXX)

option(BUILD_AS_LIB "ON to build as a static library" OFF)
option(USE_NOISE_GENERATOR "Using fftw3 to generate the GlidePlaneNoise" OFF)
option(USE_PYBIND11 "Using pybind11" ON)


find_package(eigen3 3.4 REQUIRED NO_MODULE)

#set(EigenRootDir "/usr/local/include")

set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "-Wall -Wextra -march=native -fopenmp -Ofast")
set(MoDELibRootDir "${CMAKE_CURRENT_SOURCE_DIR}/../..")

if(BUILD_AS_LIB)
	add_library(DDomp STATIC)
else()
	add_executable(DDomp DDomp.cpp)
endif()

if(USE_NOISE_GENERATOR)
	find_library(FFTW3_LIBRARIES fftw3)
	message(STATUS "FFTW3_INCLUDE_DIRS: ${FFTW3_INCLUDE_DIRS}")
	message(STATUS "FFTW3_LIBRARY_DIRS: ${FFTW3_LIBRARY_DIRS}")
	set(CMAKE_PREFIX_PATH ${FFTW3_LIBRARY_DIRS})
	include_directories(${FFTW3_INCLUDE_DIRS})
#	include_directories(${BOOSTDir})
	add_definitions(-D _MODEL_GLIDE_PLANE_NOISE_GENERATOR_)
endif()

if(USE_PYBIND11)
	find_package(Python COMPONENTS Interpreter Development)
	find_package(pybind11 CONFIG REQUIRED)
	add_definitions(-D _MODEL_PYBIND11_)
endif()

include_directories ( ${EIGEN3_INCLUDE_DIRS} )
include_directories(${MoDELibRootDir}/include/Utilities/)
include_directories(${MoDELibRootDir}/include/IO/)
include_directories(${MoDELibRootDir}/include/Math/)
include_directories(${MoDELibRootDir}/include/Geometry/)
include_directories(${MoDELibRootDir}/include/Mesh/)
include_directories(${MoDELibRootDir}/include/Lattices/)
include_directories(${MoDELibRootDir}/include/FEM/)
include_directories(${MoDELibRootDir}/include/GlidePlanes/)
include_directories(${MoDELibRootDir}/include/LoopNetwork/)
include_directories(${MoDELibRootDir}/include/Quadrature/)
include_directories(${MoDELibRootDir}/include/ParticleInteraction/)
include_directories(${MoDELibRootDir}/include/SpaceDecomposition/)
include_directories(${MoDELibRootDir}/include/DiscreteCrackMechanics/)
include_directories(${MoDELibRootDir}/include/PolycrystallineMaterials/)
include_directories(${MoDELibRootDir}/include/DislocationDynamicsIO/)
include_directories(${MoDELibRootDir}/include/DislocationMobilities/)
include_directories(${MoDELibRootDir}/include/DislocationDynamicsBase/)
include_directories(${MoDELibRootDir}/include/DislocationDynamics/)


add_subdirectory(${MoDELibRootDir}/src/Geometry Geometry)
add_subdirectory(${MoDELibRootDir}/src/Lattices Lattices)
add_subdirectory(${MoDELibRootDir}/src/Mesh Mesh)
add_subdirectory(${MoDELibRootDir}/src/GlidePlanes GlidePlanes)
add_subdirectory(${MoDELibRootDir}/src/DislocationMobilities DDDmobilities)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamicsIO DDDIO)
add_subdirectory(${MoDELibRootDir}/src/PolycrystallineMaterials PolyMaterials)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamicsBase DDDbase)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamics DDD)

if(USE_NOISE_GENERATOR)
	target_link_libraries(${PROJECT_NAME} ${FFTW3_LIBRARIES})
endif()

if(USE_PYBIND11)
target_link_libraries(${PROJECT_NAME} PRIVATE pybind11::embed)
endif()

