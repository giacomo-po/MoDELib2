/* This file is part of MODEL, the Mechanics Of Defect Evolution Library.
 *
 * Copyright (C) 2011 by Giacomo Po <gpo@ucla.edu>.
 *
 * model is distributed without any warranty under the 
 * GNU General Public License (GPL) v2 <http://www.gnu.org/licenses/>.
 */

#ifndef model_GENERATEGAUSSLEGENDRE_H_
#define model_GENERATEGAUSSLEGENDRE_H_

#include <iostream>
#include <assert.h>
#include <math.h>
#include <fstream>
#include <string>
#include <sstream>
#include <iomanip>


#include <model/Quadrature/QuadratureRecursiveRelation.h>
#include <model/Quadrature/GaussLegendre/GaussLegendreRecursiveRelation.h>


std::string modelHeader()
{
    return " /* This file is part of MODEL, the Mechanics Of Defect Evolution Library. \n * \n * Copyright (C) 2011 by Giacomo Po <gpo@ucla.edu>. \n * \n * model is distributed without any warranty under the \n * GNU General Public License (GPL) v2 <http://www.gnu.org/licenses/>. \n */";
}

int main(int argc, char *argv[])
{

    assert(argc==2 && "YOU MUST PASS EXACTLY ONE ARGUMENT (quadraturePowerMax).");

    const int quadraturePowerMax(atoi(argv[1])); // convert arg[1] to int
    assert(quadraturePowerMax>0 && "quadraturePowerMax MUST BE > 0.");

    std::cout<<"quadraturePowerMax="<<quadraturePowerMax<<std::endl;

    int dim=1;
    
    std::string includeFileName("../includeGaussLegendre1D.h");
    std::ofstream includeFile(includeFileName.c_str(), std::ios::out);
    assert(includeFile.good() && "includeFile is not good.");
    
    includeFile << modelHeader() << "\n\n";
    includeFile << "/*** This file is automatically generated by generateGaussLegendre.cpp ***/\n";
    includeFile << "#ifndef model_INCLUDEGAUSSLEGENDRE_"<<dim<<"_H_ \n";
    includeFile << "#define model_INCLUDEGAUSSLEGENDRE_"<<dim<<"_H_ \n\n";

    const double div=4;
    std::set<int> orders;
    for (int p=0; p<quadraturePowerMax;++p)
    {
        const int p0=std::pow(2.0,p);
        const int p1=std::pow(2.0,p+1);
        for (int d=1;d<=div;d++)
        {
            orders.emplace(p0+d/div*(p1-p0));
        }
    }
    
    
//    for (int p=0; p<=quadraturePowerMax;++p)
    for(const int& qOrder : orders)
    {
        
//        int qOrder = std::pow(2.0,p);
        //int qOrder = p;
        
//        std::cout<<"computing qOrder="<<qOrder<<"..."<<std::flush;
        // Compute Abscissas and weights for current case
        Eigen::MatrixXd abcsissasAndWeights(model::QuadratureRecursiveRelation::abcsissasAndWeights<model::GaussLegendreRecursiveRelation>(qOrder));
                
        // Write to file
        std::ostringstream filestream;
        filestream << "../dim1/GaussLegendre_1_" << qOrder << ".h";
        std::string filename=filestream.str();
        std::cout<<"Writing file "<<filestream.str()<<std::endl;
        remove(filename.c_str()); // eventually delete existing file
        std::ofstream file(filename.c_str(), std::ios::out);
        assert(file.good() && "file is not good.");

        file << modelHeader() << "\n\n";
        file << "/*** This file is automatically generated by generateGaussLegendre.cpp ***/\n";
        file << "#ifndef model_GAUSSLEGENDRE_"<<dim<<"_"<<qOrder<<"_H_ \n";
        file << "#define model_GAUSSLEGENDRE_"<<dim<<"_"<<qOrder<<"_H_ \n\n";
        file << "namespace model\n{\n\n";
        file << "   template<>\n";
        file << "   struct GaussLegendre<"<<dim<<","<<qOrder<<">\n";
        file << "   {\n";
        file << "       static Eigen::Matrix<double,"<<dim+1<<","<<qOrder<<"> abcsissasAndWeights()\n";
        file << "       {\n";
        file << "           Eigen::Matrix<double,"<<qOrder<<","<<dim+1<<"> aw;\n";
        file << "           aw<<";
        for (int q=0;q<qOrder;++q)
        {
            for (int d=0;d<dim+1;++d)
            {
                if (d==dim && q==qOrder-1)
                {
                    file <<std::setprecision(15)<<std::scientific<<abcsissasAndWeights(d,q) << "; ";
                }
                else
                {
                    file <<std::setprecision(15)<<std::scientific<<abcsissasAndWeights(d,q) << ", ";
                }
            }
            file << "\n";
            file << "               ";
        }
        file << "\n";
        file << "       return aw.transpose();\n";
        file << "       } \n";
        file << "   }; \n";
        file << "/*************************************************/\n";
        file << "} \n";
        file << "#endif \n"<<std::endl;
        file.close();
        
        // add to include file
        includeFile << "#include <model/Quadrature/GaussLegendre/dim1/GaussLegendre_1_"<<qOrder<<".h>\n";
    }

    
    includeFile << " \n";
    includeFile << "#endif \n"<<std::endl;
    includeFile.close();
    
}

	//////////////////////////////////////////////////////////////
#endif

